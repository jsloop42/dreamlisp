(defmacro defun (symname args & form)
  "A macro to define functions."
  `(def ~symname (fn ~args ~@form)))

(defun not (a) 
  "Negates the given boolean value."
  (if a false true))

(defmacro cond (& xs)
  "Evaluates the expression and if `true`, evaluates the corresponding form, else continues with the next expression."
  (if (> (count xs) 0)
   `(if ~(first xs)
     ~(if (> (count xs) 1)
       (nth 1 xs)
       (throw "Odd number of forms to cond"))
    (cond ~@(rest (rest xs))))))

(defmacro or () nil)
(defmacro or (x) x)
(defmacro or (x & more) 
  "Evaluates expressions one at a time. If any expression returns `true`, the function returns with the result, else continues evaluation till the last
   expression is evaluated."
  (let (res x) `(if ~res ~res (or ~@more))))

(defmacro and () nil)
(defmacro and (x) x)
(defmacro and (x & more) 
  "Evaluates expressions one at a time. If any expression returns `false`, the function returns with the result, else continues evaluation till the last
   expression is evaluated."
  (let (res x) `(if (not ~res) ~res (or ~@more))))

(defmacro when (x & form)
  "Evaluates the first expression and if `true`, evaluates the body."
  `(if ~x (do ~@form)))

(defmacro when-not (x & form)
  "Evaluates the first expression and if `false`, evaluates the body."
  `(if (not ~x) (do ~@form)))

(defmacro not= (& form) 
  "Negates the result of applying `=` on the given form."
  `(not (= ~@form)))

(defun second (xs)
  "Returns the second element from the collection."
  (nth 1 xs))

(defun sort (xs)
  "Sort the given collection in ascending order. If collection is `hash-map`, the keys are sorted."
  (if (hash-map? xs) 
    (sort [:key :asc] xs)
    (sort :asc xs)))

(defmacro -> (x & form)
  "Thread first macro, which takes an expression, evaluates it and inserts the result as the second element of the second expression and so on."
  (if (empty? form)
    x
    (let (head (first form) tail (rest form))
      (if (empty? tail)
        (if (list? head)
          `(~(first head) ~x ~@(rest head))
          (list head x))
        `(-> (-> ~x ~head) ~@tail)))))

(defmacro <- (x & form)
  "Thread last macro, which takes an expression, evaluates it and inserts the result as the last element of the second expression and so on."
  (if (empty? form)
    x
    (let (head (first form) tail (rest form))
      (if (empty? tail)
        (if (list? head)
          `(~(first head) ~@(rest head) ~x)
          (list head x))
        `(<- (<- ~x ~head) ~@tail)))))

(defun exit ()
  "Exits the REPL"
  (println "Bye")
  (exit*))
