(defmacro defun (symname args & form)
  "A macro to define functions."
  `(def ~symname (fn ~args ~@form)))

(defun not (a) 
  "Negates the given boolean value."
  (if a false true))

(defmacro cond (& xs)
  "Evaluates the expression and if `true`, evaluates the corresponding form, else continues with the next expression."
  (if (> (count xs) 0)
   `(if ~(first xs)
     ~(if (> (count xs) 1)
       (nth xs 1)
       (throw "Odd number of forms to cond"))
    (cond ~@(rest (rest xs))))))

(defmacro or () nil)
(defmacro or (x) x)
(defmacro or (x & more) 
  "Evaluates expressions one at a time. If an expression returns `false`, the function returns with the result, else continues evaluation till the last
   expression is evaluated."
  (let (res x) `(if ~res ~res (or ~@more))))

(defmacro when (x & form)
  "Evaluates the first expression and if `true`, evaluates the body."
  `(if ~x (do ~@form)))

(defmacro when-not (x & form)
  "Evaluates the first expression and if `false`, evaluates the body."
  `(if (not ~x) (do ~@form)))

(defun exit ()
  "Exits the REPL"
  (println "Bye")
  (exit*))
