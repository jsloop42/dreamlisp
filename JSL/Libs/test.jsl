(defmodule test  
  "A module to work with unit tests."
  (export all))

(def info (atom {:success 0 :fail 0 :count 0}))

(def status (atom :success))

(defun get-test-info () @info)

(defun update-test-info (hm) (reset! info hm))

(defun inc (tag)
  "Increment test case info for the given tag, where tag can be :success, :fail."
  (reset! info (assoc @info tag (+ (get @info tag) 1))))

(defun dec (tag) 
  "Decrement test case info for the given tag, where tag can be :success, :fail."
  (reset! info (assoc @info tag (- (get @info tag) 1))))

(defun inc-test-count ()
  "Increment test case count."
  (reset! info (assoc @info :count (+ (get @info :count) 1))))


(defmacro deftest (name desc & form)
  "A macro to define a test case. Takes test case name, description and expressions."
  `(def ~name ^(vector :test-case ~desc) (fn () ~desc ~@form)))

(defmacro testing (desc & form)
  "A macro to evaluate individual test cases. Takes a description string and expressions."
  `(do (print (str "\n" ~desc)) ~@form))

(defmacro is (exp res)
  `(is ~exp ~res ""))

(defmacro is (exp res msg)
  "A macro to evaluate the given expression, `exp` and checks if the result is same as the given `res`. If the test fails `msg` is printed if given, else the
   result is printed."
  (let (ret (gensym) body (gensym))
    `(let (~ret ~exp
           ~body (quote ~exp))
      (if (not (= ~ret ~res))
        (do
          (reset! status :fail)
          (map core:println/n (vector (str "\nexpected: " ~res) 
                                      (str "actual:   (not " ~body ")")
                                      (if (empty? ~msg) (str ~ret) ~msg))))
          (reset! status :success)))))

(defmacro run (module-name)
  "A test runner function which takes a string, `module-name` as its argument and executes all test functions found in the module."
  (let (info (gensym) runner (gensym) f (gensym) fn-meta (gensym) xs (gensym) stat (gensym))
    `(do
      (let (~info (:exports (module-info ~module-name))
            ~runner (fn (~xs)
                      (when-not (empty? ~xs)
                        (let (~f (first ~xs) ~fn-meta (meta ~f))
                          (when (and (not (nil? ~fn-meta)) (vector? ~fn-meta) (= (first ~fn-meta) :test-case))
                            (print (str "\n" (nth ~fn-meta 1)))
                            (inc-test-count)
                            ((eval ~f))
                            (if (= @status :success) (inc :success) (inc :fail)))
                          (~runner (rest ~xs))))))
        (~runner ~info)
        (print (str "\n" @info "\n"))))))
