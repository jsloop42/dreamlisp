#!/bin/bash

bin="JSLTests/objc"
buildlog="build.log"
proj="JSL.xcodeproj"
scheme="JSL"

function getFilename() {
    if [ "$1" = "0" ]; then
        out="step0_repl"
    elif [ "$1" = "1" ]; then
        out=step1_read_print
    elif [ "$1" = "2" ]; then
        out="step2_eval"
    elif [ "$1" = "3" ]; then
        out="step3_env"
    elif [ "$1" = "4" ]; then
        out="step4_if_fn_do"
    elif [ "$1" = "5" ]; then
        out="step5_tco"
    elif [ "$1" = "6" ]; then
        out="step6_file"
    elif [ "$1" = "7" ]; then
        out="step7_quote"
    elif [ "$1" = "8" ]; then
        out="step8_macros"
    elif [ "$1" = "9" ]; then
        out="step9_try"
    elif [ "$1" = "A" ]; then
        out="stepA_mal"
    else
        echo "step argument missing."
        exit
    fi
    echo "$out"
}

function help() {
    echo "Build requires step as argument"
    echo "Usage: $0 step"
    exit
}

# Display a progress bar
function spinner() {
    local pid=$!
    local delay=0.3
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        echo -n "."
        sleep $delay
    done
    echo ""
}

function buildproj() {
    xcodebuild -scheme $scheme build > $buildlog 2>&1
    # xcodebuild -scheme $scheme build 2>&1 | tee $buildlog
}

function clean() {
    xcodebuild clean -project $proj -scheme $scheme > /dev/null
}

function build() {
    clean
    ret=$(getFilename "$1")
    buildproj
    cp $(tail -4 $buildlog | head -1 | rev | cut -d " " -f1 | rev) $bin/$ret
}

# Check if the step argument is provided
if [ $# -ne 1 ]; then
  help
fi

(build $@) & spinner
